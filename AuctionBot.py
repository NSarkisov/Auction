import telebot
import json
import sqlite3 as sl
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from telebot.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton

with open("Config.json") as settings:
    config = json.load(settings)
    Token = config.get("telegram_token")
    database = config.get("database_path")
    geocoder_api = config.get("geocoder_api")
    queries = config.get("queries")
bot = telebot.TeleBot(Token)
con = sl.connect(database, check_same_thread=False)

texts_dict = {"/start for user": ('–ü—Ä–∏–≤–µ—Ç ,—è –±–æ—Ç –∞—É–∫—Ü–∏–æ–Ω–æ–≤ @NScourse_bot\n'
                                  '–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ª–æ—Ç–∞–º–∏ ,–∏ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å\n'
                                  '—Ö–æ–¥ –∞—É–∫—Ü–∏–æ–Ω–∞.–ê —Ç–∞–∫ –∂–µ –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤–∞—à–∏–º–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º–∏\n'
                                  '–±–∞–ª–∞–º–∏.\n'
                                  '–£–¥–∞—á–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤ ü§ù'),
              "/start for admin": ('–≤ –±–æ—Ç –∞—É–∫—Ü–∏–æ–Ω–æ–≤ @NScourse_bot\n'
                                   '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è –≤–∞—Å –¥–µ–π—Å—Ç–≤–∏—è'),
              "my_lots": "",
              "rules": ("–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤,–ø–æ–±–µ–¥–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤—ã–π—Ç–∏ –Ω–∞ —Å–≤—è–∑—å —Å\n"
                        "–ø—Ä–æ–¥–∞–≤—Ü–æ–º\n"
                        "—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ —Å—É—Ç–æ–∫‚ÄºÔ∏è\n"
                        "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–±—è–∑–∞–Ω –≤—ã–∫—É–ø–∏—Ç—å –ª–æ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ –¢–†–Å–• –¥–Ω–µ–π,–ø–æ—Å–ª–µ\n"
                        "–æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞üî•\n"
                        "–ù–ï –í–´–ö–£–ü –õ–û–¢–ê - –ü–ï–†–ú–ê–ù–ï–ù–¢–ù–´–ô –ë–ê–ù –í–û –í–°–ï–•\n"
                        "–ù–£–ú–ò–ó–ú–ê–¢–ò–ß–ï–°–ö–ò–• –°–û–û–ë–©–ï–°–¢–í–ê–• –ò –ê–£–ö–¶–ò–û–ù–ê–•ü§¨\n"
                        "–ß—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞,–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ‚è∞\n"
                        "–ê–Ω—Ç–∏—Å–Ω–∞–π–ø–µ—Ä - –°—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–Ω–∞—è –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ\n"
                        "–∫–æ–Ω—Ü–∞,–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç\n"
                        "–ê—É–∫—Ü–∏–æ–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç –≤–ø–µ—Ä—ë–¥ ‚ÄºÔ∏è\n\n"
                        "–†–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü—ã,–∏—Ö –û—Ç–∑—ã–≤—ã —Å—É–º–∞—Ä–Ω–æ\n"
                        "–¥–æ—Å—Ç–∏–≥–∞—é—Ç 10000+ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö.\n"
                        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –§–æ—Ç–æ –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø—Ä–æ–¥–∞–≤—Ü–∞.\n"
                        "–°–ª—É—á–∞–π–Ω–æ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É?ü§î\n"
                        "–ù–∞–ø–∏—à–∏ –ø—Ä–æ–¥–∞–≤—Ü—É‚ÄºÔ∏è\n\n\n"
                        "–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—á—Ç–æ–π,—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —É–∫–∞–∑–∞–Ω–∞ –ø–æ–¥ —Ñ–æ—Ç–æ.\n"
                        "–õ–æ—Ç—ã –º–æ–∂–Ω–æ –∫–æ–ø–∏—Ç—å ,—ç–∫–æ–Ω–æ–º—è –ø—Ä–∏ —ç—Ç–æ–º –Ω–∞ –ø–æ—á—Ç–µ.\n"
                        "–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ —Ç—Ä—ë—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã‚ÄºÔ∏è"),
              "help_info": ("–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã @opt_monet\n"
                            "–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∏–ª–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ –ø–∏—à–∏—Ç–µ @csv666")
              }
administrators_dict = {}


def update(case):
    update_type = {"–û–±–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤": queries['searching_admins']}

    with con:
        query = con.execute(update_type[case]).fetchall()

    if case == "–û–±–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤":
        for admin in query:
            first_name, last_name, telegram_id, telegram_link, phone = admin[1], admin[2], admin[3], admin[4], admin[5]
            email, access_level, started_time, ended_time = admin[6], admin[7], admin[8], admin[9],
            administrators_dict.update({telegram_id: {"first_name": first_name, "last_name": last_name,
                                                      "telegram_link": telegram_link, "phone": phone,
                                                      "email": email, "access_level": access_level,
                                                      "started_time": started_time, "ended_time": ended_time}})

    print(administrators_dict)


def greetings(telegram_id, *args):
    type_of_message = args[0]
    message_id = args[1]
    with con:
        balance = str(con.execute(queries['get_balance'], [telegram_id]).fetchall()[0][0])

    text = texts_dict['/start for user']

    starting = InlineKeyboardMarkup()

    my_lots = InlineKeyboardButton("–ú–æ–∏ –ª–æ—Ç—ã", callback_data=json.dumps(['/start', "my_lots"]))
    users_balance = InlineKeyboardButton('–ë–∞–ª–∞–Ω—Å: ' + balance + " BYN",
                                         callback_data=json.dumps(['/start', "my_balance"]))
    rules = InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞", callback_data=json.dumps(['/start', "rules"]))
    help_info = InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data=json.dumps(['/start', "help_info"]))

    # buttons for administrators only

    # if telegram_id in administrators_dict.keys():

    starting.row(users_balance, my_lots)
    starting.row(rules, help_info)

    send = {"send": [bot.send_message, {'chat_id': telegram_id, "text": text, "reply_markup": starting}],
            "edit": [bot.edit_message_text, {'chat_id': telegram_id, 'message_id': message_id, "text": text,
                                             "reply_markup": starting}]}

    function, kwargs = send[type_of_message][0], send[type_of_message][1]

    function(**kwargs)


def personal_cabinet(button_info, chat_id, message_id):
    cabinet = InlineKeyboardMarkup()
    main_menu = InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=json.dumps(["/home", "menu"]))
    cabinet.add(main_menu)
    # button_info can be "my_lots", "my_balance", "rules", "help_info" for taking texts from texts_dict
    text = texts_dict[button_info]
    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=cabinet)


@bot.message_handler(content_types=['text', 'photo'])
def start(message):
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    telegram_id = message.from_user.id
    telegram_link = "@" + message.from_user.username

    menu = {"/start": greetings, "/help": ""}

    if message.text in menu.keys():

        with con:
            searching = con.execute(queries["searching_user"], [telegram_id]).fetchall()

            if not searching:
                con.execute(queries["adding_user"], [first_name, last_name, telegram_id, telegram_link])

        menu[message.text](telegram_id, "send", None)


@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    bot.answer_callback_query(callback_query_id=call.id, )
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    call.data = json.loads(call.data)
    flag = call.data[0]
    button_info = call.data[1]
    callback = {'/start': (personal_cabinet, (button_info, chat_id, message_id)),
                '/home': (greetings, (chat_id, "edit", message_id))}

    function = callback[flag][0]
    args = callback[flag][1]

    function(*args)


print("Started")
update(case="–û–±–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
bot.infinity_polling()
